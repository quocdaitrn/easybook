{
    "swagger": "2.0",
    "info": {
        "title": "Hotel Booking API",
        "description": "Autogenerate API documents",
        "version": "1.0.0",
        "contact": {
            "email": "daitq.cntt@gmail.com"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/agreements/": {
            "get": {
                "tags": [
                    "agreements"
                ],
                "description": "get Agreement",
                "operationId": "AgreementController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Agreement"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "agreements"
                ],
                "description": "create Agreement",
                "operationId": "AgreementController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Agreement content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Agreement"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Agreement"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/agreements/{id}": {
            "get": {
                "tags": [
                    "agreements"
                ],
                "description": "get Agreement by id",
                "operationId": "AgreementController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Agreement"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "agreements"
                ],
                "description": "update the Agreement",
                "operationId": "AgreementController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Agreement content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Agreement"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Agreement"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "agreements"
                ],
                "description": "delete the Agreement",
                "operationId": "AgreementController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/cities/": {
            "get": {
                "tags": [
                    "cities"
                ],
                "description": "get City",
                "operationId": "CityController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.City"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "cities"
                ],
                "description": "create City",
                "operationId": "CityController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for City content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.City"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.City"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/cities/{id}": {
            "get": {
                "tags": [
                    "cities"
                ],
                "description": "get City by id",
                "operationId": "CityController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.City"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "cities"
                ],
                "description": "update the City",
                "operationId": "CityController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for City content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.City"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.City"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "cities"
                ],
                "description": "delete the City",
                "operationId": "CityController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/guests/": {
            "get": {
                "tags": [
                    "guests"
                ],
                "description": "get Guest",
                "operationId": "GuestController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Guest"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "guests"
                ],
                "description": "create Guest",
                "operationId": "GuestController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Guest content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Guest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Guest"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/guests/{id}": {
            "get": {
                "tags": [
                    "guests"
                ],
                "description": "get Guest by id",
                "operationId": "GuestController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Guest"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "guests"
                ],
                "description": "update the Guest",
                "operationId": "GuestController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Guest content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Guest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Guest"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "guests"
                ],
                "description": "delete the Guest",
                "operationId": "GuestController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/hotels/": {
            "get": {
                "tags": [
                    "hotels"
                ],
                "description": "get Hotel",
                "operationId": "HotelController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Hotel"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "hotels"
                ],
                "description": "create Hotel",
                "operationId": "HotelController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Hotel content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Hotel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Hotel"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/hotels/{id}": {
            "get": {
                "tags": [
                    "hotels"
                ],
                "description": "get Hotel by id",
                "operationId": "HotelController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Hotel"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "hotels"
                ],
                "description": "update the Hotel",
                "operationId": "HotelController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Hotel content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Hotel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Hotel"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "hotels"
                ],
                "description": "delete the Hotel",
                "operationId": "HotelController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/invoices/": {
            "get": {
                "tags": [
                    "invoices"
                ],
                "description": "get Invoice",
                "operationId": "InvoiceController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Invoice"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "invoices"
                ],
                "description": "create Invoice",
                "operationId": "InvoiceController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Invoice content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Invoice"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Invoice"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/invoices/{id}": {
            "get": {
                "tags": [
                    "invoices"
                ],
                "description": "get Invoice by id",
                "operationId": "InvoiceController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Invoice"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "invoices"
                ],
                "description": "update the Invoice",
                "operationId": "InvoiceController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Invoice content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Invoice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Invoice"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "invoices"
                ],
                "description": "delete the Invoice",
                "operationId": "InvoiceController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/notifications/": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "description": "get Notification",
                "operationId": "NotificationController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Notification"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "notifications"
                ],
                "description": "create Notification",
                "operationId": "NotificationController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Notification content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Notification"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Notification"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/notifications/{id}": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "description": "get Notification by id",
                "operationId": "NotificationController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Notification"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "notifications"
                ],
                "description": "update the Notification",
                "operationId": "NotificationController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Notification content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Notification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Notification"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "notifications"
                ],
                "description": "delete the Notification",
                "operationId": "NotificationController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/penalty_rules/": {
            "get": {
                "tags": [
                    "penalty_rules"
                ],
                "description": "get PenaltyRule",
                "operationId": "PenaltyRuleController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PenaltyRule"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "penalty_rules"
                ],
                "description": "create PenaltyRule",
                "operationId": "PenaltyRuleController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PenaltyRule content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PenaltyRule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.PenaltyRule"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/penalty_rules/{id}": {
            "get": {
                "tags": [
                    "penalty_rules"
                ],
                "description": "get PenaltyRule by id",
                "operationId": "PenaltyRuleController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PenaltyRule"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "penalty_rules"
                ],
                "description": "update the PenaltyRule",
                "operationId": "PenaltyRuleController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PenaltyRule content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PenaltyRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PenaltyRule"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "penalty_rules"
                ],
                "description": "delete the PenaltyRule",
                "operationId": "PenaltyRuleController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/reservations/": {
            "get": {
                "tags": [
                    "reservations"
                ],
                "description": "get Reservation",
                "operationId": "ReservationController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "reservations"
                ],
                "description": "create Reservation",
                "operationId": "ReservationController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Reservation content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Reservation"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/reservations/{id}": {
            "get": {
                "tags": [
                    "reservations"
                ],
                "description": "get Reservation by id",
                "operationId": "ReservationController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "reservations"
                ],
                "description": "update the Reservation",
                "operationId": "ReservationController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Reservation content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "reservations"
                ],
                "description": "delete the Reservation",
                "operationId": "ReservationController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/room_facilitates/": {
            "get": {
                "tags": [
                    "room_facilitates"
                ],
                "description": "get RoomFacilitate",
                "operationId": "RoomFacilitateController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RoomFacilitate"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "room_facilitates"
                ],
                "description": "create RoomFacilitate",
                "operationId": "RoomFacilitateController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for RoomFacilitate content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoomFacilitate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.RoomFacilitate"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/room_facilitates/{id}": {
            "get": {
                "tags": [
                    "room_facilitates"
                ],
                "description": "get RoomFacilitate by id",
                "operationId": "RoomFacilitateController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RoomFacilitate"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "room_facilitates"
                ],
                "description": "update the RoomFacilitate",
                "operationId": "RoomFacilitateController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for RoomFacilitate content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoomFacilitate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RoomFacilitate"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "room_facilitates"
                ],
                "description": "delete the RoomFacilitate",
                "operationId": "RoomFacilitateController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/room_reserveds/": {
            "get": {
                "tags": [
                    "room_reserveds"
                ],
                "description": "get RoomReserved",
                "operationId": "RoomReservedController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RoomReserved"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "room_reserveds"
                ],
                "description": "create RoomReserved",
                "operationId": "RoomReservedController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for RoomReserved content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoomReserved"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.RoomReserved"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/room_reserveds/{id}": {
            "get": {
                "tags": [
                    "room_reserveds"
                ],
                "description": "get RoomReserved by id",
                "operationId": "RoomReservedController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RoomReserved"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "room_reserveds"
                ],
                "description": "update the RoomReserved",
                "operationId": "RoomReservedController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for RoomReserved content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoomReserved"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RoomReserved"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "room_reserveds"
                ],
                "description": "delete the RoomReserved",
                "operationId": "RoomReservedController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/rooms/": {
            "get": {
                "tags": [
                    "rooms"
                ],
                "description": "get Room",
                "operationId": "RoomController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Room"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "rooms"
                ],
                "description": "create Room",
                "operationId": "RoomController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Room content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Room"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Room"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/rooms/{id}": {
            "get": {
                "tags": [
                    "rooms"
                ],
                "description": "get Room by id",
                "operationId": "RoomController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Room"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "rooms"
                ],
                "description": "update the Room",
                "operationId": "RoomController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Room content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Room"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Room"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "rooms"
                ],
                "description": "delete the Room",
                "operationId": "RoomController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/service_level/": {
            "get": {
                "tags": [
                    "service_level"
                ],
                "description": "get ServiceLevel",
                "operationId": "ServiceLevelController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceLevel"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "service_level"
                ],
                "description": "create ServiceLevel",
                "operationId": "ServiceLevelController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ServiceLevel content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ServiceLevel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ServiceLevel"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/service_level/{id}": {
            "get": {
                "tags": [
                    "service_level"
                ],
                "description": "get ServiceLevel by id",
                "operationId": "ServiceLevelController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceLevel"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "service_level"
                ],
                "description": "update the ServiceLevel",
                "operationId": "ServiceLevelController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ServiceLevel content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ServiceLevel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceLevel"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "service_level"
                ],
                "description": "delete the ServiceLevel",
                "operationId": "ServiceLevelController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/stay_tracking/": {
            "get": {
                "tags": [
                    "stay_tracking"
                ],
                "description": "get StayTracking",
                "operationId": "StayTrackingController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.StayTracking"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "stay_tracking"
                ],
                "description": "create StayTracking",
                "operationId": "StayTrackingController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for StayTracking content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StayTracking"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.StayTracking"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/stay_tracking/{id}": {
            "get": {
                "tags": [
                    "stay_tracking"
                ],
                "description": "get StayTracking by id",
                "operationId": "StayTrackingController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.StayTracking"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "stay_tracking"
                ],
                "description": "update the StayTracking",
                "operationId": "StayTrackingController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for StayTracking content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StayTracking"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.StayTracking"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "stay_tracking"
                ],
                "description": "delete the StayTracking",
                "operationId": "StayTrackingController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Agreement": {
            "title": "Agreement",
            "type": "object"
        },
        "models.City": {
            "title": "City",
            "type": "object"
        },
        "models.Guest": {
            "title": "Guest",
            "type": "object"
        },
        "models.Hotel": {
            "title": "Hotel",
            "type": "object"
        },
        "models.Invoice": {
            "title": "Invoice",
            "type": "object"
        },
        "models.Notification": {
            "title": "Notification",
            "type": "object"
        },
        "models.PenaltyRule": {
            "title": "PenaltyRule",
            "type": "object"
        },
        "models.Reservation": {
            "title": "Reservation",
            "type": "object"
        },
        "models.Room": {
            "title": "Room",
            "type": "object"
        },
        "models.RoomFacilitate": {
            "title": "RoomFacilitate",
            "type": "object"
        },
        "models.RoomReserved": {
            "title": "RoomReserved",
            "type": "object"
        },
        "models.ServiceLevel": {
            "title": "ServiceLevel",
            "type": "object"
        },
        "models.StayTracking": {
            "title": "StayTracking",
            "type": "object"
        }
    },
    "tags": [
        {
            "name": "agreements",
            "description": "AgreementController operations for Agreement\n"
        },
        {
            "name": "cities",
            "description": "CityController operations for City\n"
        },
        {
            "name": "guests",
            "description": "GuestController operations for Guest\n"
        },
        {
            "name": "hotels",
            "description": "HotelController operations for Hotel\n"
        },
        {
            "name": "invoices",
            "description": "InvoiceController operations for Invoice\n"
        },
        {
            "name": "notifications",
            "description": "NotificationController operations for Notification\n"
        },
        {
            "name": "penalty_rules",
            "description": "PenaltyRuleController operations for PenaltyRule\n"
        },
        {
            "name": "reservations",
            "description": "ReservationController operations for Reservation\n"
        },
        {
            "name": "rooms",
            "description": "RoomController operations for Room\n"
        },
        {
            "name": "room_facilitates",
            "description": "RoomFacilitateController operations for RoomFacilitate\n"
        },
        {
            "name": "room_reserveds",
            "description": "RoomReservedController operations for RoomReserved\n"
        },
        {
            "name": "service_level",
            "description": "ServiceLevelController operations for ServiceLevel\n"
        },
        {
            "name": "stay_tracking",
            "description": "StayTrackingController operations for StayTracking\n"
        }
    ]
}